<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ship</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_angular_damping = 10;
phy_linear_damping = 1;
degrees = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check(vk_left))
    {
    image_angle += 5;
    physics_apply_angular_impulse(0.5);
    }
else if(keyboard_check(vk_right))
    {
    image_angle -= 5;
    physics_apply_angular_impulse(-0.5);

    }

if(keyboard_check(vk_up))
    {
    /* dumbest way to handle collisions coming up */
    /* Naming is fucked up to add extra character so we can save an object var */
    degreess = -phy_rotation+270;
    anglee = degreess * pi / 180;
    dx = x + cos(anglee)*-10;
    dy = y + sin(anglee)*-10;
        
    //physics_apply_force(x,y-10,0, 10);
    physics_apply_impulse(dx, dy,lengthdir_x(2,degreess), -lengthdir_y(2,degreess));
    
    }

/* quite rough, should only teleport if whole object is off the screen */
/* CALCULATED FOR CENTER */
if(phy_position_x&lt;0)
    {
    phy_position_x=room_width;
    }
else if(phy_position_x&gt;room_width)
    {
    phy_position_x = 0;
    }
/* handle the vertical overflow */
if(phy_position_y&lt;0)
    {
    phy_position_y = room_height;
    }
else if(phy_position_y&gt;room_height)
    {
    phy_position_y = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_asteroid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>o_score.LIVES -= 1;
instance_create(x,y,o_ship_explode);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>degrees = -phy_rotation+270;
angle = degrees * pi / 180;
line_length = 100;

/* DEBUGGING draw forward indicator circle */
px = x + cos(angle)*line_length;
py = y + sin(angle)*line_length;
//draw_set_color(c_green);draw_circle(px, py, 5, false);

/* Draw the boosters! :D*/
dx = x + cos(angle)*-10;
dy = y + sin(angle)*-10;

if(keyboard_check(vk_up)){draw_set_color(c_red);draw_circle(dx,dy, 5, false);}

draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, phy_rotation, c_white, 1);

//flag =  phy_debug_render_collision_pairs | phy_debug_render_obb | phy_debug_render_core_shapes | phy_debug_render_shapes;
//physics_world_draw_debug(flag);
//draw_set_color(c_red);
//physics_draw_debug();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* TODO: control the rate of fire */
degrees = -phy_rotation+270;
angle = degrees * pi / 180;

dx = x + cos(angle)*10;
dy = y + sin(angle)*10;

o = instance_create(dx,dy,o_bullet);
o.MOVE_X = x + cos(angle)*1000;
o.MOVE_Y = y + sin(angle)*1000;
with(o){
    physics_apply_force(x,y,3*lengthdir_x(1000,o_ship.degrees), -3*lengthdir_y(1000,o_ship.degrees));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,12</point>
    <point>8,0</point>
    <point>16,12</point>
  </PhysicsShapePoints>
</object>
